---
AWSTemplateFormatVersion: 2010-09-09


Description: >
  This template contains the services required to run API


Parameters:
  TemplateBucket:
    Type: String
    Default: tp-todo-react-testing-infrastructure
    Description: >
      The S3 bucket from which to fetch the templates used by this stack.

  DNSName:
    Type: String

  Cluster:
    Type: String

  DesiredCount:
    Type: Number
    Default: 0
  
  ImageURI:
    Type: String

  SourceSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id

  VpcId:
    Type: AWS::EC2::VPC::Id

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
  
  ParentListenerARN:
    Type: String

  Env:
    Type: String
    AllowedValues:
      - production
      - staging


Mappings:
  ENVLBPriority:
    production:
      Main: 3
    staging:
      Main: 6

Resources:
  # ElasticCacheRedis:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: !Sub "https://s3.amazonaws.com/${TemplateBucket}/templates/elasticache-redis.yaml"
  #     Parameters:
  #       VpcId: !Ref VpcId
  #       Subnets: !Join [",", !Ref Subnets]
  #       SourceSecurityGroup: !Ref RedisSecurityGroup
  #       EngineVersion: 5.0.6
  #       NumShards: 1
  #       NumReplicas: 1
  #       TransitEncryption: 'false'
  
  # RedisSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: !Sub ${AWS::StackName}-secgroup-api-redis
  #     VpcId: !Ref VpcId

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-secgroup-api
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref SourceSecurityGroup

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}-api

  FargateService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      SchedulingStrategy: REPLICA
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets: !Ref Subnets
      LoadBalancers:
        - ContainerName: api
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-api
      RequiresCompatibilities:
        - FARGATE
      Memory: 512
      Cpu: 256
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref TaskExecutionRole
      ContainerDefinitions:
        - Name: api
          Image: !Ref ImageURI
          Essential: true
          PortMappings:
            - ContainerPort: 8080
          DependsOn:
            - ContainerName: redis
              Condition: START
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: !Sub ${AWS::StackName}-api
          Environment:
            - Name: REDIS_HOST
              Value: localhost
            - Name: REDIS_PORT
              Value: 6379
            - Name: REDIS_USE_TLS
              Value: "false"
        - Name: redis
          Image: redis:5.0.7-alpine
          PortMappings:
            - ContainerPort: 6379
          Essential: true

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: 8080
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /healthcheck
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: "ip"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ParentListenerARN
      Priority: !FindInMap [ENVLBPriority, !Ref Env, Main]
      Conditions:
        - Field: host-header
          Values:
            - !Ref DNSName
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

Outputs:
  Service:
    Value: !Ref FargateService

  ServiceLink:
    Value: !Sub https://${DNSName}/
