---
AWSTemplateFormatVersion: 2010-09-09


Description: >
  This template will set up the infrastructure required to build, test and run
  the Todo application with AWS CodePipeline, AWS CodeBuild, AWS ECS, AWS Fargate/AWS EC2,
  AWS ECR, and Amazon DynamoDB


Parameters:
  LaunchType:
    Type: String
    Default: Fargate
    AllowedValues:
      - Fargate
      - EC2
    Description: >
      The launch type for your service. Selecting EC2 will create an Auto
      Scaling group of t2.micro instances for your cluster. See
      https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html
      to learn more about launch types.

  GitHubUser:
    Type: String
    Description: Your username on GitHub.

  GitHubRepo:
    Type: String
    Default: tp-todo-react-testing
    Description: The repo name of the app.

  GitHubBranch:
    Type: String
    Default: master
    Description: The branch of the repo to continuously deploy.

  GitHubToken:
    Type: String
    NoEcho: true
    Description: >
      Token for the user specified above. (https://github.com/settings/tokens)

  TemplateBucket:
    Type: String
    Default: tp-todo-react-testing-deployment
    Description: >
      The S3 bucket from which to fetch the templates used by this stack.


Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      GitHubUser:
        default: "User"
      GitHubRepo:
        default: "Repo"
      GitHubBranch:
        default: "Branch"
      GitHubToken:
        default: "Personal Access Token"
      LaunchType:
        default: "Launch Type"
    ParameterGroups:
      - Label:
          default: Cluster Configuration
        Parameters:
          - LaunchType
      - Label:
          default: GitHub Configuration
        Parameters:
          - GitHubRepo
          - GitHubBranch
          - GitHubUser
          - GitHubToken
      - Label:
          default: Stack Configuration
        Parameters:
          - TemplateBucket


Resources:
  Cluster:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${TemplateBucket}/infrastructure/templates/ecs-cluster.yaml"
      Parameters:
        LaunchType: !Ref LaunchType
        SourceSecurityGroup: !GetAtt LoadBalancer.Outputs.SecurityGroup
        Subnets: !GetAtt VPC.Outputs.Subnets
        VpcId: !GetAtt VPC.Outputs.VpcId

  FrontendRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain

  APIRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain

  FrontendDeploymentPipeline:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${TemplateBucket}/infrastructure/templates/deployment-pipeline.yaml"
      Parameters:
        Name: frontend
        Cluster: !GetAtt Cluster.Outputs.ClusterName
        Service: !GetAtt FrontendService.Outputs.Service
        GitHubUser: !Ref GitHubUser
        GitHubToken: !Ref GitHubToken
        GitHubRepo: !Ref GitHubRepo
        GitHubBranch: !Ref GitHubBranch
        Repository: !Ref FrontendRepository
        FolderPath: frontend

  APIDeploymentPipeline:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${TemplateBucket}/infrastructure/templates/deployment-pipeline.yaml"
      Parameters:
        Name: api
        Cluster: !GetAtt Cluster.Outputs.ClusterName
        Service: !GetAtt APIService.Outputs.Service
        GitHubUser: !Ref GitHubUser
        GitHubToken: !Ref GitHubToken
        GitHubRepo: !Ref GitHubRepo
        GitHubBranch: !Ref GitHubBranch
        Repository: !Ref FrontendRepository
        FolderPath: api

  LoadBalancer:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${TemplateBucket}/infrastructure/templates/load-balancer.yaml"
      Parameters:
        LaunchType: !Ref LaunchType
        Subnets: !GetAtt VPC.Outputs.Subnets
        VpcId: !GetAtt VPC.Outputs.VpcId

  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${TemplateBucket}/infrastructure/templates/vpc.yaml"
      Parameters:
        Name: !Ref AWS::StackName
        VpcCIDR: 10.215.0.0/16
        Subnet1CIDR: 10.215.10.0/24
        Subnet2CIDR: 10.215.20.0/24

  FrontendService:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${TemplateBucket}/infrastructure/templates/service.yaml"
      Parameters:
        Cluster: !GetAtt Cluster.Outputs.ClusterName
        DesiredCount: 0
        LaunchType: !Ref LaunchType
        ContainerName: frontend
        ContainerPort: 3000
        TargetGroup: !GetAtt LoadBalancer.Outputs.FrontendTargetGroup
        Repository: !Ref FrontendRepository
        SourceSecurityGroup: !GetAtt LoadBalancer.Outputs.SecurityGroup
        Subnets: !GetAtt VPC.Outputs.Subnets

  APIService:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${TemplateBucket}/infrastructure/templates/service.yaml"
      Parameters:
        Cluster: !GetAtt Cluster.Outputs.ClusterName
        DesiredCount: 0
        LaunchType: !Ref LaunchType
        ContainerName: api
        ContainerPort: 8080
        TargetGroup: !GetAtt LoadBalancer.Outputs.APITargetGroup
        Repository: !Ref APIRepository
        SourceSecurityGroup: !GetAtt LoadBalancer.Outputs.SecurityGroup
        Subnets: !GetAtt VPC.Outputs.Subnets


Outputs:
  ServiceUrl:
    Description: The sample service that is being continuously deployed.
    Value: !GetAtt LoadBalancer.Outputs.ServiceUrl

  FrontendPipelineUrl:
    Description: The frontend continuous deployment pipeline in the AWS Management Console.
    Value: !GetAtt FrontendDeploymentPipeline.Outputs.PipelineUrl

  APIPipelineUrl:
    Description: The api continuous deployment pipeline in the AWS Management Console.
    Value: !GetAtt APIDeploymentPipeline.Outputs.PipelineUrl